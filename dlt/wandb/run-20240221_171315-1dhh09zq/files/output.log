
Epoch 0:  49%|██████████████████████████████████████████████▍                                                | 23/47 [00:01<00:01, 20.79it/s, loss=0.109, lr=2.3e-6, step=23]
#############################################################
batch[geometry].shape:  torch.Size([64, 20, 6])
batch[image_features].shape:  torch.Size([64, 20, 512])
batch[padding_mask].shape:  torch.Size([64, 20, 6])
batch[cat].shape:  torch.Size([64, 20])
#############################################################
###################################################
cat_input.shape:  torch.Size([64, 20])
type(cat_input):  <class 'torch.Tensor'>
###################################################
#############################################################
batch[geometry].shape:  torch.Size([64, 20, 6])
batch[image_features].shape:  torch.Size([64, 20, 512])
batch[padding_mask].shape:  torch.Size([64, 20, 6])
batch[cat].shape:  torch.Size([64, 20])
#############################################################
###################################################
cat_input.shape:  torch.Size([64, 20])
type(cat_input):  <class 'torch.Tensor'>
###################################################
#############################################################
batch[geometry].shape:  torch.Size([64, 20, 6])
batch[image_features].shape:  torch.Size([64, 20, 512])
batch[padding_mask].shape:  torch.Size([64, 20, 6])
batch[cat].shape:  torch.Size([64, 20])
#############################################################
###################################################
cat_input.shape:  torch.Size([64, 20])
type(cat_input):  <class 'torch.Tensor'>
###################################################
#############################################################
batch[geometry].shape:  torch.Size([64, 20, 6])
batch[image_features].shape:  torch.Size([64, 20, 512])
batch[padding_mask].shape:  torch.Size([64, 20, 6])
batch[cat].shape:  torch.Size([64, 20])
#############################################################
###################################################
cat_input.shape:  torch.Size([64, 20])
type(cat_input):  <class 'torch.Tensor'>
###################################################
#############################################################
batch[geometry].shape:  torch.Size([64, 20, 6])
batch[image_features].shape:  torch.Size([64, 20, 512])
batch[padding_mask].shape:  torch.Size([64, 20, 6])
batch[cat].shape:  torch.Size([64, 20])
#############################################################
###################################################
cat_input.shape:  torch.Size([64, 20])
type(cat_input):  <class 'torch.Tensor'>
###################################################
#############################################################
batch[geometry].shape:  torch.Size([64, 20, 6])
batch[image_features].shape:  torch.Size([64, 20, 512])
batch[padding_mask].shape:  torch.Size([64, 20, 6])
batch[cat].shape:  torch.Size([64, 20])
#############################################################
###################################################
cat_input.shape:  torch.Size([64, 20])
type(cat_input):  <class 'torch.Tensor'>
###################################################
#############################################################
batch[geometry].shape:  torch.Size([64, 20, 6])
batch[image_features].shape:  torch.Size([64, 20, 512])
batch[padding_mask].shape:  torch.Size([64, 20, 6])
batch[cat].shape:  torch.Size([64, 20])
#############################################################
###################################################
cat_input.shape:  torch.Size([64, 20])
type(cat_input):  <class 'torch.Tensor'>
###################################################
#############################################################
batch[geometry].shape:  torch.Size([64, 20, 6])
batch[image_features].shape:  torch.Size([64, 20, 512])
batch[padding_mask].shape:  torch.Size([64, 20, 6])
batch[cat].shape:  torch.Size([64, 20])
#############################################################
###################################################
cat_input.shape:  torch.Size([64, 20])
type(cat_input):  <class 'torch.Tensor'>
###################################################
#############################################################
batch[geometry].shape:  torch.Size([64, 20, 6])
batch[image_features].shape:  torch.Size([64, 20, 512])
batch[padding_mask].shape:  torch.Size([64, 20, 6])
batch[cat].shape:  torch.Size([64, 20])
#############################################################
###################################################
cat_input.shape:  torch.Size([64, 20])
type(cat_input):  <class 'torch.Tensor'>
###################################################
#############################################################
batch[geometry].shape:  torch.Size([64, 20, 6])
batch[image_features].shape:  torch.Size([64, 20, 512])
batch[padding_mask].shape:  torch.Size([64, 20, 6])
batch[cat].shape:  torch.Size([64, 20])
#############################################################
###################################################
cat_input.shape:  torch.Size([64, 20])
type(cat_input):  <class 'torch.Tensor'>
###################################################
#############################################################
batch[geometry].shape:  torch.Size([64, 20, 6])
batch[image_features].shape:  torch.Size([64, 20, 512])
batch[padding_mask].shape:  torch.Size([64, 20, 6])
batch[cat].shape:  torch.Size([64, 20])
#############################################################
###################################################
cat_input.shape:  torch.Size([64, 20])
type(cat_input):  <class 'torch.Tensor'>
###################################################
#############################################################
batch[geometry].shape:  torch.Size([64, 20, 6])
batch[image_features].shape:  torch.Size([64, 20, 512])
batch[padding_mask].shape:  torch.Size([64, 20, 6])
batch[cat].shape:  torch.Size([64, 20])
#############################################################
###################################################
cat_input.shape:  torch.Size([64, 20])
type(cat_input):  <class 'torch.Tensor'>
###################################################
#############################################################
batch[geometry].shape:  torch.Size([64, 20, 6])
batch[image_features].shape:  torch.Size([64, 20, 512])
batch[padding_mask].shape:  torch.Size([64, 20, 6])
batch[cat].shape:  torch.Size([64, 20])
#############################################################
###################################################
cat_input.shape:  torch.Size([64, 20])
type(cat_input):  <class 'torch.Tensor'>
###################################################
#############################################################
batch[geometry].shape:  torch.Size([64, 20, 6])
batch[image_features].shape:  torch.Size([64, 20, 512])
batch[padding_mask].shape:  torch.Size([64, 20, 6])
batch[cat].shape:  torch.Size([64, 20])
#############################################################
###################################################
cat_input.shape:  torch.Size([64, 20])
type(cat_input):  <class 'torch.Tensor'>
###################################################
#############################################################
batch[geometry].shape:  torch.Size([64, 20, 6])
batch[image_features].shape:  torch.Size([64, 20, 512])
batch[padding_mask].shape:  torch.Size([64, 20, 6])
batch[cat].shape:  torch.Size([64, 20])
#############################################################
###################################################
cat_input.shape:  torch.Size([64, 20])
type(cat_input):  <class 'torch.Tensor'>
###################################################
#############################################################
batch[geometry].shape:  torch.Size([64, 20, 6])
batch[image_features].shape:  torch.Size([64, 20, 512])
batch[padding_mask].shape:  torch.Size([64, 20, 6])
batch[cat].shape:  torch.Size([64, 20])
#############################################################
###################################################
cat_input.shape:  torch.Size([64, 20])
type(cat_input):  <class 'torch.Tensor'>
###################################################
#############################################################
batch[geometry].shape:  torch.Size([64, 20, 6])
batch[image_features].shape:  torch.Size([64, 20, 512])
batch[padding_mask].shape:  torch.Size([64, 20, 6])
batch[cat].shape:  torch.Size([64, 20])
#############################################################
###################################################
cat_input.shape:  torch.Size([64, 20])
type(cat_input):  <class 'torch.Tensor'>
###################################################
#############################################################
batch[geometry].shape:  torch.Size([64, 20, 6])
batch[image_features].shape:  torch.Size([64, 20, 512])
batch[padding_mask].shape:  torch.Size([64, 20, 6])
batch[cat].shape:  torch.Size([64, 20])
#############################################################
###################################################
cat_input.shape:  torch.Size([64, 20])
type(cat_input):  <class 'torch.Tensor'>
###################################################
#############################################################
batch[geometry].shape:  torch.Size([64, 20, 6])
batch[image_features].shape:  torch.Size([64, 20, 512])
batch[padding_mask].shape:  torch.Size([64, 20, 6])
batch[cat].shape:  torch.Size([64, 20])
#############################################################
###################################################
cat_input.shape:  torch.Size([64, 20])
type(cat_input):  <class 'torch.Tensor'>
###################################################
#############################################################
batch[geometry].shape:  torch.Size([64, 20, 6])
batch[image_features].shape:  torch.Size([64, 20, 512])
batch[padding_mask].shape:  torch.Size([64, 20, 6])
batch[cat].shape:  torch.Size([64, 20])
#############################################################
###################################################
cat_input.shape:  torch.Size([64, 20])
type(cat_input):  <class 'torch.Tensor'>
###################################################
#############################################################
batch[geometry].shape:  torch.Size([64, 20, 6])
batch[image_features].shape:  torch.Size([64, 20, 512])
batch[padding_mask].shape:  torch.Size([64, 20, 6])
batch[cat].shape:  torch.Size([64, 20])
#############################################################
###################################################
cat_input.shape:  torch.Size([64, 20])
type(cat_input):  <class 'torch.Tensor'>
###################################################
#############################################################
batch[geometry].shape:  torch.Size([64, 20, 6])
batch[image_features].shape:  torch.Size([64, 20, 512])
batch[padding_mask].shape:  torch.Size([64, 20, 6])
batch[cat].shape:  torch.Size([64, 20])
#############################################################
###################################################
cat_input.shape:  torch.Size([64, 20])
type(cat_input):  <class 'torch.Tensor'>
###################################################
#############################################################
batch[geometry].shape:  torch.Size([64, 20, 6])
batch[image_features].shape:  torch.Size([64, 20, 512])
batch[padding_mask].shape:  torch.Size([64, 20, 6])
batch[cat].shape:  torch.Size([64, 20])
#############################################################
###################################################
cat_input.shape:  torch.Size([64, 20])
type(cat_input):  <class 'torch.Tensor'>
###################################################
#############################################################
batch[geometry].shape:  torch.Size([64, 20, 6])
batch[image_features].shape:  torch.Size([64, 20, 512])
batch[padding_mask].shape:  torch.Size([64, 20, 6])
batch[cat].shape:  torch.Size([64, 20])
#############################################################
###################################################
cat_input.shape:  torch.Size([64, 20])
type(cat_input):  <class 'torch.Tensor'>
Epoch 0:  64%|█████████████████████████████████████████████████████████████▉                                   | 30/47 [00:02<00:00, 22.30it/s, loss=0.142, lr=3e-6, step=30]Traceback (most recent call last):
  File "/home/mineslab-ubuntu/KDH_CAL2/dlt/main.py", line 119, in <module>
    app.run(main)
  File "/home/mineslab-ubuntu/anaconda3/envs/DLT/lib/python3.9/site-packages/absl/app.py", line 308, in run
    _run_main(main, args)
  File "/home/mineslab-ubuntu/anaconda3/envs/DLT/lib/python3.9/site-packages/absl/app.py", line 254, in _run_main
    sys.exit(main(argv))
  File "/home/mineslab-ubuntu/KDH_CAL2/dlt/main.py", line 94, in main
    TrainLoopCAL(accelerator=accelerator, model=model, diffusion=noise_scheduler,
  File "/home/mineslab-ubuntu/KDH_CAL2/dlt/trainers/cal_trainer2.py", line 148, in train
    self.train_epoch_CAL(epoch)
  File "/home/mineslab-ubuntu/KDH_CAL2/dlt/trainers/cal_trainer2.py", line 174, in train_epoch_CAL
    for step, (batch, ids) in enumerate(self.train_dataloader):
  File "/home/mineslab-ubuntu/anaconda3/envs/DLT/lib/python3.9/site-packages/accelerate/data_loader.py", line 460, in __iter__
    current_batch = send_to_device(current_batch, self.device)
  File "/home/mineslab-ubuntu/anaconda3/envs/DLT/lib/python3.9/site-packages/accelerate/utils/operations.py", line 152, in send_to_device
    return honor_type(
  File "/home/mineslab-ubuntu/anaconda3/envs/DLT/lib/python3.9/site-packages/accelerate/utils/operations.py", line 84, in honor_type
    return type(obj)(generator)
  File "/home/mineslab-ubuntu/anaconda3/envs/DLT/lib/python3.9/site-packages/accelerate/utils/operations.py", line 153, in <genexpr>
    tensor, (send_to_device(t, device, non_blocking=non_blocking, skip_keys=skip_keys) for t in tensor)
  File "/home/mineslab-ubuntu/anaconda3/envs/DLT/lib/python3.9/site-packages/accelerate/utils/operations.py", line 161, in send_to_device
    {
  File "/home/mineslab-ubuntu/anaconda3/envs/DLT/lib/python3.9/site-packages/accelerate/utils/operations.py", line 162, in <dictcomp>
    k: t if k in skip_keys else send_to_device(t, device, non_blocking=non_blocking, skip_keys=skip_keys)
  File "/home/mineslab-ubuntu/anaconda3/envs/DLT/lib/python3.9/site-packages/accelerate/utils/operations.py", line 171, in send_to_device
    return tensor.to(device, non_blocking=non_blocking)
KeyboardInterrupt
#############################################################
batch[geometry].shape:  torch.Size([64, 20, 6])
batch[image_features].shape:  torch.Size([64, 20, 512])
batch[padding_mask].shape:  torch.Size([64, 20, 6])
batch[cat].shape:  torch.Size([64, 20])
#############################################################
###################################################
cat_input.shape:  torch.Size([64, 20])
type(cat_input):  <class 'torch.Tensor'>
###################################################
#############################################################
batch[geometry].shape:  torch.Size([64, 20, 6])
batch[image_features].shape:  torch.Size([64, 20, 512])
batch[padding_mask].shape:  torch.Size([64, 20, 6])
batch[cat].shape:  torch.Size([64, 20])
#############################################################
###################################################
cat_input.shape:  torch.Size([64, 20])
type(cat_input):  <class 'torch.Tensor'>
###################################################
#############################################################
batch[geometry].shape:  torch.Size([64, 20, 6])
batch[image_features].shape:  torch.Size([64, 20, 512])
batch[padding_mask].shape:  torch.Size([64, 20, 6])
batch[cat].shape:  torch.Size([64, 20])
#############################################################
###################################################
cat_input.shape:  torch.Size([64, 20])
type(cat_input):  <class 'torch.Tensor'>
###################################################
#############################################################
batch[geometry].shape:  torch.Size([64, 20, 6])
batch[image_features].shape:  torch.Size([64, 20, 512])
batch[padding_mask].shape:  torch.Size([64, 20, 6])
batch[cat].shape:  torch.Size([64, 20])
#############################################################
###################################################
cat_input.shape:  torch.Size([64, 20])
type(cat_input):  <class 'torch.Tensor'>
###################################################
#############################################################
batch[geometry].shape:  torch.Size([64, 20, 6])
batch[image_features].shape:  torch.Size([64, 20, 512])
batch[padding_mask].shape:  torch.Size([64, 20, 6])
batch[cat].shape:  torch.Size([64, 20])
#############################################################
###################################################
cat_input.shape:  torch.Size([64, 20])
type(cat_input):  <class 'torch.Tensor'>
###################################################
#############################################################
batch[geometry].shape:  torch.Size([64, 20, 6])
batch[image_features].shape:  torch.Size([64, 20, 512])
batch[padding_mask].shape:  torch.Size([64, 20, 6])
batch[cat].shape:  torch.Size([64, 20])
#############################################################
###################################################
cat_input.shape:  torch.Size([64, 20])
type(cat_input):  <class 'torch.Tensor'>
###################################################